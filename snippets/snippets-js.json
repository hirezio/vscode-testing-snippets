{
  "Method Placeholder": {
    "prefix": "methodplaceholder",
    "description": "Placeholder for method - throwing error",
    "body": [
      "$1($2) {",
      "  throw new Error('Method not implemented.');",
      "}"
    ]
  },
  "Given method": {
    "prefix": "giv",
    "body": ["Given(() => {", "\t$1", "});", ""]
  },
  "When method": {
    "prefix": "when",
    "body": ["When(() => {", "\t$1", "});", ""]
  },
  "Then method": {
    "prefix": "then",
    "body": ["Then(`$1`, () => {", "\t$2", "});", ""]
  },
  "Describe function": {
    "prefix": "desc",
    "description": "Describe function",
    "body": ["describe(`$1`, () => {", "  $2", "});"]
  },
  "Describe and When": {
    "prefix": "descwhen",
    "description": "Creates Describe function and When function",
    "body": [
      "describe(`METHOD: $1`, () => {",
      "  When(() => {",
      "     serviceUnderTest.$1()",
      "  });",
      "});"
    ]
  },
  "Test case - Describe, Given and Then": {
    "prefix": "testcase",
    "description": "Creates a test case for a gwt test",
    "body": [
      "describe(`GIVEN $1 THEN $2`, () => {",
      "",
      "  Given(() => {",
      "     // $1",
      "  });",
      "  Then(() => {",
      "     // $2",
      "  });",
      "});"
    ]
  },
  "expect toEqual": {
    "prefix": "expe",
    "description": "Creates an expectation statement",
    "body": ["expect($1).toEqual($2);"]
  }
}